/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FlightTicket,
} from '../models/index';
import {
    FlightTicketFromJSON,
    FlightTicketToJSON,
} from '../models/index';

export interface BookTicketRequest {
    flightTicket: FlightTicket;
}

export interface ByDateRequest {
    date: string;
}

export interface ByDestinationRequest {
    dest: string;
}

export interface ByKickoffRequest {
    kickoff: string;
}

export interface DeleteTicketRequest {
    id: number;
}

export interface UpdateTicketRequest {
    id: number;
    flightTicket: FlightTicket;
}

/**
 * 
 */
export class FlightTicketControllerApi extends runtime.BaseAPI {

    /**
     */
    async bookTicketRaw(requestParameters: BookTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['flightTicket'] == null) {
            throw new runtime.RequiredError(
                'flightTicket',
                'Required parameter "flightTicket" was null or undefined when calling bookTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tickets`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlightTicketToJSON(requestParameters['flightTicket']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async bookTicket(requestParameters: BookTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.bookTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async byDateRaw(requestParameters: ByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlightTicket>>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling byDate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/date/{date}`;
        urlPath = urlPath.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlightTicketFromJSON));
    }

    /**
     */
    async byDate(requestParameters: ByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlightTicket>> {
        const response = await this.byDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async byDestinationRaw(requestParameters: ByDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlightTicket>>> {
        if (requestParameters['dest'] == null) {
            throw new runtime.RequiredError(
                'dest',
                'Required parameter "dest" was null or undefined when calling byDestination().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/destination/{dest}`;
        urlPath = urlPath.replace(`{${"dest"}}`, encodeURIComponent(String(requestParameters['dest'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlightTicketFromJSON));
    }

    /**
     */
    async byDestination(requestParameters: ByDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlightTicket>> {
        const response = await this.byDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async byKickoffRaw(requestParameters: ByKickoffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlightTicket>>> {
        if (requestParameters['kickoff'] == null) {
            throw new runtime.RequiredError(
                'kickoff',
                'Required parameter "kickoff" was null or undefined when calling byKickoff().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/kickoff/{kickoff}`;
        urlPath = urlPath.replace(`{${"kickoff"}}`, encodeURIComponent(String(requestParameters['kickoff'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlightTicketFromJSON));
    }

    /**
     */
    async byKickoff(requestParameters: ByKickoffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlightTicket>> {
        const response = await this.byKickoffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTicketRaw(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteTicket(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTicketsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FlightTicket>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlightTicketFromJSON));
    }

    /**
     */
    async getTickets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FlightTicket>> {
        const response = await this.getTicketsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async healthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async health(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.healthRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTicketRaw(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTicket().'
            );
        }

        if (requestParameters['flightTicket'] == null) {
            throw new runtime.RequiredError(
                'flightTicket',
                'Required parameter "flightTicket" was null or undefined when calling updateTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tickets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FlightTicketToJSON(requestParameters['flightTicket']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async updateTicket(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
